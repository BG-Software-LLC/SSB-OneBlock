plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.7'
    id 'maven-publish'
}

group 'SSBOneBlock'
version = "2023.3"

project.ext {
    archiveFolder = file("archive/")
    targetFolder = file("target/")
    buildVersion = System.getenv("BUILD_NUMBER") == null || Boolean.parseBoolean(System.getenv("STABLE_BUILD")) ?
            version : version + "-b" + System.getenv("BUILD_NUMBER")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.github.goooler.shadow'

    repositories {
        maven { url 'https://repo.bg-software.com/repository/nms/' }
        maven { url 'https://repo.bg-software.com/repository/api/' }
        maven { url 'https://repo.bg-software.com/repository/common/' }
        maven { url 'https://repo.bg-software.com/repository/dependencies/' }
    }

    dependencies {
        compileOnly "com.bgsoftware.common.reflection:ReflectionUtils:b3"
    }

    build {
        dependsOn shadowJar
    }
}

subprojects {
    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = rootProject.archiveFolder
    }
}

dependencies {
    implementation fileTree(rootProject.archiveFolder.getAbsolutePath())

    implementation "com.bgsoftware.common.config:CommentedConfiguration:1.0.3"

    compileOnly 'com.bgsoftware:SuperiorSkyblockAPI:2022.9'

    compileOnly "org.spigotmc:v1_12_R1:latest"
}

jar {
    from {
        for (File file : rootProject.archiveFolder.listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
    eachFile { details ->
        if (details.name.contentEquals('plugin.yml')) {
            filter { String line ->
                line.replace('${project.version}', rootProject.buildVersion)
            }
        }
    }
}

shadowJar {
    dependsOn(jar)

    relocate 'com.bgsoftware.common', 'com.bgsoftware.superiorskyblock.libs.com.bgsoftware.common'

    archiveFileName = rootProject.name + "-" + rootProject.buildVersion + ".jar"

    delete fileTree(rootProject.targetFolder.getAbsolutePath())

    exclude '*exclude.jar'

    destinationDirectory = rootProject.targetFolder
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

clean {
    delete rootProject.archiveFolder
}

build {
    dependsOn shadowJar
    dependsOn clean
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build

shadowJar.dependsOn subprojects.build
compileJava.dependsOn childProjects.values().shadowJar